<template>
    <div class="flex flex-col md:h-10 gap-y-3 md:items-center md:flex-row mt-5">
        <div class="text-2xl font-medium group-[.mode--light]:text-white">Sample</div>
        <router-link :to="{ name: 'cms.item.sample.index' }"
            class="btn btn-secondary ml-auto hover:ring-4">Quay lại</router-link>
        <!-- <a :href="this.baseURL + '/cms/item/sample'" class="btn btn-secondary ml-auto hover:ring-4">Quay lại</a> -->
        <button @click="update(true)" class="btn btn-secondary ml-2 hover:ring-4">Lưu & Thoát</button>
        <button @click="update()" class="btn btn-primary ml-2 hover:ring-4">Lưu</button>
    </div>
    <div v-if="!fetchError" class="mt-5 grid grid-cols-12 gap-6">
        <div class="intro-y col-span-12">
            <div class="intro-y box p-5 mt-5 shadow-mdm">
                <div class="flex flex-wrap gap-4 list-size-design">
                    <div class="w-full">
                        <div class="input-form">
                            <label for="email" class="form-label">Email<span class="text-danger">*</span></label>
                            <input v-model="form.email" name="email" id="email" maxlength="255" class="form-control" placeholder="Email" readonly>
                        </div>
                    </div>
                    <div class="w-full">
                        <div class="input-form">
                            <label for="title" class="form-label">Tiêu đề</label>
                            <input v-model="form.title" name="title" id="title" maxlength="255" class="form-control" placeholder="Title" readonly>
                        </div>
                    </div>
                    <div class="w-full">
                        <div class="input-form">
                            <label for="content" class="form-label">Nội dung</label>
                            <textarea v-model="form.content" name="content" id="content" rows="5" placeholder="Nội dung" class="form-control" readonly></textarea>
                        </div>
                    </div>
                    <template v-if="design">
                        <div :class="field.classSize.class" v-for="field in form.data" :key="field.id">
                            <FormField :key="field.id" :attrHTML="field"></FormField>
                        </div>
                    </template>
                    <div class="w-full">
                        <div class="input-form">
                            <label for="admin_comment" class="form-label">Ghi chú admin</label>
                            <textarea v-model="form.admin_comment" name="admin_comment" id="admin_comment" rows="5" placeholder="Ghi chú admin" class="form-control"></textarea>
                        </div>
                    </div>
                    <template v-if="!design">
                        <router-link
                            :to="{ name: `cms.${category.category_type.type}.edit`, params: { id: category.id } }"
                            class="col-span-12 text-center hover:underline text-sm flex-1">
                            Không có bản thiết kế? Tạo từ danh mục
                        </router-link>
                    </template>

                </div>

            </div>
        </div>
    </div>
    <NotificationSticky ref="notificationSticky" :message="objNotificationSticky.message"
        :type="objNotificationSticky.type"></NotificationSticky>
</template>

<script>
import NotificationSticky from '../../global/NotificationSticky.vue'
import FormField from '../../global/FormField.vue';
import { ref } from "vue";
export default {
    props: ['id'],
    inject: ['baseURL'],
    components: {
        NotificationSticky,
        FormField
    },
    data() {
        return {
            fetchError: false,
            category: {},
            objNotificationSticky: {
                type: null,
                message: null,
            },
            errors: {},
            form: {
                title: null,
                email: null,
                content: null,
                admin_comment: null,
                data: ref([]),
            },
            design: [],
        }
    },
    methods: {
        removeAccents(str) {
            const accentsMap = {
                a: 'áàạảãâấầậẩẫăắằặẳẵ',
                e: 'éèẹẻẽêếềệểễ',
                i: 'íìịỉĩ',
                o: 'óòọỏõôốồộổỗơớờợởỡ',
                u: 'úùụủũưứừựửữ',
                y: 'ýỳỵỷỹ',
                d: 'đ',
                A: 'ÁÀẠẢÃÂẤẦẬẨẪĂẮẰẶẲẴ',
                E: 'ÉÈẸẺẼÊẾỀỆỂỄ',
                I: 'ÍÌỊỈĨ',
                O: 'ÓÒỌỎÕÔỐỒỘỔỖƠỚỜỢỞỠ',
                U: 'ÚÙỤỦŨƯỨỪỰỬỮ',
                Y: 'ÝỲỴỶỸ',
                D: 'Đ'
            };

            for (let key in accentsMap) {
                for (let char of accentsMap[key]) {
                str = str.replace(new RegExp(char, 'g'), key);
                }
            }

            return str;
        },
        createSlug(str) {
            str = this.removeAccents(str); // Loại bỏ dấu từ các ký tự có dấu

            // Chuyển đổi các ký tự không phải chữ cái, số thành khoảng trắng
            str = str.replace(/[^a-zA-Z0-9]/g, ' ');

            // Loại bỏ khoảng trắng thừa
            str = str.trim().replace(/\s+/g, '-');

            // Chuyển đổi thành chữ thường
            str = str.toLowerCase();

            this.form.slug = str;
        },
        openFileManager() {
            let that = this;
            var lfm = function (id, type, options) {
                let button = document.getElementById(id);

                button.addEventListener('click', function () {
                    var route_prefix = (options && options.prefix) ? options.prefix : '/laravel-filemanager';
                    var target_preview = document.getElementById(button.getAttribute(`data-preview`));


                    window.open(route_prefix + '?type=' + type  || 'file', 'FileManager', 'width=900,height=600');
                    window.SetUrl = function (items) {
                        var file_path = items.map(function (item) {
                            return item.url;
                        }).join(',');
                        
                        if(file_path != ''){
                            file_path = file_path.split(',');
                            that.form.thumbnail = file_path[0];
                        }
                    };
                });
            };
            // Not 
            lfm(`lfm`, 'image', {prefix: `${that.baseURL}/laravel-filemanager`});
        },
        removeImagePreview(){
            this.form.thumbnail = '';
        },
        notificationSticky(type, message) {
            this.objNotificationSticky.message = message;
            this.objNotificationSticky.type = type;
            this.$refs.notificationSticky.show();
        },
        exit() {
            setTimeout(function () {
                window.location.href = `${that.baseURL}/cms/item/sample`
            }, 1000);
        },
        update(exit) {
            let that = this;
            axios
                .put(`${this.baseURL}/cms/api/item/sample/${this.id}`, {admin_comment: this.form.admin_comment})
                .then((response) => {
                    console.log('Response from server:', response.data);
                    if (response.data.success == true) {
                        this.notificationSticky('success', response.data.message);
                        if (exit) {
                            setTimeout(function () {
                                window.location.href = `${that.baseURL}/cms/item/sample`
                            }, 1000);
                        } else {
                            setTimeout(function () {
                                location.reload();
                            }, 1000);
                        }


                    } else {
                        this.notificationSticky('error', response.data.message);
                    }
                })
                .catch((response) => {
                    console.log(response);
                    this.notificationSticky('error', 'Đã xảy ra lỗi. Vui lòng thử lại sau');
                });
        },
        loadCategory() {
            let that = this;
            return axios
                .get(`${this.baseURL}/cms/api/item/sample/category`)
                .then((response) => {
                    var responseData = response.data.data;
                    this.category = responseData;
                })
                .catch((error) => {
                    console.error("Error fetching data:", error);
                });
        },
        loadDesign() {
            let that = this;
            return axios
                .get(`${this.baseURL}/cms/api/design/${this.category.design_id}`)
                .then((response) => {
                    if (response.data.success) {
                        this.design = response.data.data;
                    }
                })
                .catch((error) => {
                    console.error("Error fetching data:", error);
                });
        },
        load(){
            let that = this;
            return axios
                .get(`${this.baseURL}/cms/api/item/sample/${this.id}`)
                .then((response) => {
                    var responseData = response.data.data;
                    that.form = responseData;
                    if(that.form.data){
                        that.form.data.forEach(item => {
                            item.readonly = true;
                        })
                    }
                    that.form.date = that.form.date.substring(0, 10);
                })
                .catch((error) => {
                    console.error("Error fetching data:", error);
                });
        },
    },
    mounted() {
        Promise.all([
            this.loadCategory(),
        ]).then(() => {
            this.loadDesign()
            this.load();
        }).catch((error) => {
        });
    },
}
</script>

<style></style>